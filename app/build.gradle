apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def keyStorePath
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    keyStorePath = System.getenv('USERPROFILE') + File.separator + ".ssh"
} else {
    keyStorePath = System.getenv('HOME') + File.separator + ".ssh"
}

def keyStoreFile = keyStorePath + File.separator + "AndroidKeyStore.jks"
def keyStoreConfig = keyStorePath + File.separator + "AndroidKeyStore.properties"

Properties props = new Properties()
if (new File(keyStoreConfig).exists()) {
    props.load(new FileInputStream(file(keyStoreConfig)))
}


//打包时使用
def getDate() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC")) // 注意时区
}

// 获取当前git的Revision，打包时使用
def getRevision() {
    if (!System.getenv('CI_BUILD')) {
        return 0
    }
    return ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
    }

    signingConfigs {

        def keystore = file('../buildsystem/AndroidKeyStore.jks')
        debug {
            // metod1
            storeFile keystore
            storePassword keystore_password
            keyAlias key_alias
            keyPassword key_password

        }

        release {
            // method2  keystore placed in  ../.ssh/
           storeFile file(keyStoreFile)
           storePassword props['keystore_password']
           keyAlias props['key_alias']
           keyPassword props['key_password']

        }
    }


    buildTypes {
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
//            buildConfigField "String", "ENDPOINT", "\"${endpoint_product}\""
//            resValue "string", "umeng_appkey", "${umeng_appkey_dev}"
//            resValue "string", "deepshare_appid", "${deepshare_appid}"
//            resValue "string", "bugly_appid", "${bugly_appid_dev}"
//            resValue "string", "rong_appkey", "${rong_appkey}"
//            resValue "string", "channel", "dev"
//            resValue "string", "op_app_name", "dev_${app_name}"
        }
        release {
            versionNameSuffix "-release"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //在Java中通过BuildConfig.ENDPOINT调用
            buildConfigField "String", "ENDPOINT", "\"${endpoint_product}\""
            //在xml文件中通过R.string.key调用
            resValue "string", "umeng_appkey", "${umeng_appkey_product}"
            resValue "string", "deepshare_appid", "${deepshare_appid}"
            resValue "string", "bugly_appid", "${bugly_appid_product}"
            resValue "string", "rong_appkey", "${rong_appkey}"
            resValue "string", "channel", "product"
            resValue "string", "op_app_name", "${app_name}"
        }
    }

    //解决三方库文件冲突
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude('META-INF/LICENSE.txt')
        exclude('META-INF/NOTICE.txt')
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        // umeng推送的jar包含有的okio库跟okhttp的okio库冲突
//        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
//        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
    }
    //lint检查
    lintOptions {
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        checkReleaseBuilds true
        disable "InvalidPackage"
        disable "MissingTranslation" // 禁用中英文string.xml的强制lint
        //配置信息在lint.xml中,需手动建立
//        lintConfig file("lint.xml")
    }

    //打包管理
//    productFlavors {
    //打包不同的so文件
//        arm {
//            
//            //在defaultConfig基础上添加了下面配置
//            ndk {
//                //引号内容要与jniLibs文件夹内的文件夹名相同
//                abiFilters "arm64-v8a", "armeabi", "armeabi-v7a"
//            }
//        }
//        
//        x86 {
//            ndk {
//                abiFilters "x86", "x86_64"
//            }
//        }
//        mips {
//            ndk {
//                abiFilters "mips"
//            }
//        }

    //需要同时安装apk时，可以更改applicationId，覆盖defaultConfig
//        qa {
//            applicationId ""
//        }
//        bata {
//            applicationId ""
//        }

    //渠道号
//        rc_yingyongbao {}
//        rc_baidu {}
//        rc_stagging {}
//        rc_product {}
//    }
    //友盟统计
//    productFlavors.all { flavor ->
//        // 这里只是方便友盟统计每个渠道的数据
//        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

//    // 修改打包后APK的文件名
//    //variant = flavor + buildType 
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (variant.buildType.name.equals('release')) {
//                // 输出apk名称为ap_v1.0_2016-04-12_yingyongbao_a23f2e1.apk
////                def releaseApkName = 'ap-v' + defaultConfig.versionName + '_' + getDate() + '_' + variant.productFlavors[0].name + "_" + getRevision() + '.apk'
//                def releaseApkName = 'ap-v' + defaultConfig.versionName + '_' + getDate() + '_' + getRevision() + '.apk'
//                output.outputFile = new File(outputFile.parent, releaseApkName)
//            }
//            if (variant.buildType.name.equals('debug')) {
//                // Do nothing
//            }
//
////            if (outputFile != null && outputFile.name.endWith(".apk")) {
////                def fileName = "ap_v${defaultConfig.versionName}_channel${variant.name}.apk"
////                output.outputFile = new File(outputFile.parent,fileName)
////            }
//        }
//    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
//    compile(name:'test', ext:'aar') arr文件放到libs目录下，'test'为arr文件名
    compile project(':ext')
    compile project(':data')
    compile project(':domain')
    compile project(':uikit')
    compile project(':uiframework')
    compile project(':im')
    compile project(':authorize')
    compile project(':share')
    compile project(':lbs')
    testCompile rootProject.ext.libJunit
    compile rootProject.ext.libSupportV4
    compile rootProject.ext.libSupportAppcompatV7
    compile rootProject.ext.libSupportDesign
    compile rootProject.ext.libRecyclerViewV7
    compile rootProject.ext.libRetrofit
    compile rootProject.ext.libRetrofitConverterGson
    compile rootProject.ext.libRetrofitAdapterRxJava
    compile rootProject.ext.libOkHttpLoggingInterceptor
    compile rootProject.ext.libFastJson
    compile rootProject.ext.libRxJava
    compile rootProject.ext.libRxAndroid
    compile rootProject.ext.libEventBus
    compile rootProject.ext.libGlide
    compile rootProject.ext.libDagger
    apt rootProject.ext.libDaggerCompiler
    compile rootProject.ext.libJavaxAnnotation

//    debugCompile rootProject.ext.debugDependencies.leakCanary
//    releaseCompile rootProject.ext.releaseDependencies.leakCanary
//    debugCompile rootProject.ext.debugDependencies.blockCanary
//    releaseCompile rootProject.ext.releaseDependencies.blockCanary
//    compile rootProject.ext.libUmengAnalytics
    debugCompile rootProject.ext.debugDependencies.stetho

}
